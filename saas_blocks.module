<?php
/**
 * @file
 * Block Module to display a breadcrumb as a page title.
 */
 
 /**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function saas_blocks_help($path, $arg) {
  switch ($path) {
    case "admin/help#traincrumbs":
      return '<p>' . t("Displays breadcrumb as a page title with regard to the current URL") . '</p>';
      break;
  }
} 

/**
 * Implements hook_block_info().
 */
function saas_blocks_block_info() {
    $blocks['traincrumbs'] = array(
        'info' => t('Traincrumbs'),
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    $blocks['topic_category_nav'] = array(
        'info' => t('Topic Category Page Navigation'),
        'cache' => DRUPAL_CACHE_PER_PAGE,
    );
    $blocks['node_permissions'] = array(
        'info' => t('Topic Page Navigation with Node Permissions'),
        'cache' => DRUPAL_CACHE_PER_PAGE,
    );
    $blocks['icat_power'] = array(
        'info' => t('Powered By ICAT'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );
    $blocks['user_profile_info'] = array(
        'info' => t('Users Profile Information'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );
    $blocks['training_module_index'] = array(
        'info' => t('Training Module Index'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );
    $blocks['related_content_list'] = array(
        'info' => t('Related Content List'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );
    $blocks['user_import'] = array(
        'info' => t('User Import Block'),
        'cache' => DRUPAL_CACHE_GLOBAL,
    );
    return $blocks;
}

/**
 * Implements hook_block_view().
 * 
 * Prepares the contents of the block.
 */
function saas_blocks_block_view($block_name = '') {
	switch ($block_name) {
		case 'traincrumbs':
			$block['subject'] = t('Traincrumbs');
			$block['content'] = saas_blocks_traincrumbs();
			return $block;
        case 'topic_category_nav':
			$block['subject'] = t('Topic Category Page Navigation');
			$block['content'] = saas_blocks_topic_categories_links();
			return $block;
		case 'node_permissions':
			$block['subject'] = t('Topic Page Navigation with Node Permissions');
			$block['content'] = saas_blocks_node_permissions();
			return $block;
        case 'icat_power':
			$block['subject'] = t('Powered by ICAT');
			$block['content'] = saas_blocks_icat_power();
			return $block;
        case 'user_profile_info':
			$block['subject'] = t('Users Profile Information');
			$block['content'] = saas_blocks_profile_info();
			return $block;
        case 'training_module_index':
			$block['subject'] = t('Training Module Index');
			$block['content'] = saas_blocks_training_index();
			return $block;
        case 'user_import':
			$block['subject'] = t('User Import Block');
			$block['content'] = saas_blocks_user_import();
			return $block;
        case 'related_content_list':
			$block['subject'] = t('Related Content List');
			$block['content'] = saas_blocks_related_content();
			return $block;
    }
}
    

/**
 * Custom content function. 
 * 
 * @return 
 *   training breadcrumb output array
 */
function saas_blocks_traincrumbs(){
    $url = str_replace("_","-",strtolower($_SERVER['REQUEST_URI']));
    $urlArray = parse_url($url);
    $pathArray = explode("/",trim($urlArray['path'],"/"));
    $pageType = "";
    $pageTypeHuman = "";
    $officeType = "saas";
    $officeTypeHuman = "SAAS";
    $extraInfo = "";
    $extraInfoHuman = drupal_get_title();
    $thumbClass = "saas";
    $viewCat = "";
    $viewTtl = "";
    
	$pageArray = array(
		"news" => "News",
		"directory" => "Directory",
		"office" => "Office",
		"positions" => "Positions",
		"position" => "Position",
		"tools" => "Tools",
		"topics-category" => "Topics by Category",
		"topics-title" => "Topics by Title",
		"topics-categories" => "Topics by Categories",
		"topics-titles" => "Topics by Titles",
		"topics" => "Topics",
		"user" => "User",
		"profile" => "Profile",
		"quiz" => "Quiz",
		"node" => "Node",
		"assessment-manager" => "Assessment Manager",
		"question-manager" => "Question Manager",
	);
    if (isset($pathArray[0])) {
        $pageType = $pathArray[0];
        if (isset($pageArray[$pageType])) {
            $pageTypeHuman = $pageArray[$pageType];
        }
    }

	$officeArray = array(
		"saas" => "SAAS",
		"admissions" => "Admissions",
		"financial-aid" => "Financial Aid",
		"registrar" => "Registrar",
		"onestop" => "OneStop",
		"counseling" => "OneStop Counseling",
		"processing" => "OneStop Processing",
		"student-services" => "OneStop Student Services",
		"other" => "Other",
		"executive-director" => "Executive Director",
		"financial-services" => "Financial Services",
		"icat" => "ICAT",
		"technology-applications" => "Technology Applications",
		"treasury-services" => "Treasury Services",
		"advisement" => "Advisement Center",
	);
    if (isset($pathArray[1])) {
        $officeType = $pathArray[1];
        $thumbClass = $officeType;
        if (isset($officeArray[$officeType])) {
            $officeTypeHuman = $officeArray[$officeType];
        }
    }

    $registrarArray = array(
		"athletic-eligibility" => "Athletic Eligibility",
		"class-scheduling" => "Class Scheduling",
		"curriculum" => "Curriculum",
		"data-and-web-management" => "Data and Web Management",
		"data-entry" => "Data Entry",
		"discontinuance" => "Discontinuance",
		"general" => "General",
		"graduation" => "Graduation",
		"petitions" => "Petitions",
		"records-and-registration" => "Records and Registration",
		"registrars" => "Registrars",
		"transfer-evaluation" => "Transfer Evaluation"
    );
    
    $advisementArray = array(
		"general" => "General"
    );
    
    if (isset($pathArray[2])) {
        $extraInfo = $pathArray[2];
        if (($extraInfo == "take") && ($pageType == "node")) {
            $pageType = "quiz";
            $pageTypeHuman = "Quiz";
        }
        if (($extraInfo == "results") && ($pageType == "node")) {
            $pageType = "quiz";
            $pageTypeHuman = "Quiz";
        }
        if (isset($registrarArray[$extraInfo]) && ($officeType == "registrar")) {
            $registrarType = $extraInfo;
            $registrarTypeHuman = $registrarArray[$extraInfo];
            $extraInfoHuman = $registrarTypeHuman;
        }
        if (isset($advisementArray[$extraInfo]) && ($officeType == "advisement")) {
            $advisementType = $extraInfo;
            $advisementTypeHuman = $advisementArray[$extraInfo];
            $extraInfoHuman = $advisementTypeHuman;
        }
    }

    switch ($pageType) {
        case "topics-category":
            $viewCat = '<a href="/topics-category/'.str_replace("-","_",$officeType).'" class="filteroptions selected" title"Category">Category</a>';
            $viewTtl = '<a href="/topics-title/'.str_replace("-","_",$officeType).'" class="filteroptions" title"Alphabetical">A-Z</a>';
            break;
        case "topics-title":
            $viewCat = '<a href="/topics-category/'.str_replace("-","_",$officeType).'" class="filteroptions" title"Category">Category</a>';
            $viewTtl = '<a href="/topics-title/'.str_replace("-","_",$officeType).'" class="filteroptions selected" title"Alphabetical">A-Z</a>';
            break;
        case "topics-categories":
            if ($officeType == "registrar") {
                $viewCat = '<a href="/topics-categories/registrar/'.$registrarType.'" class="filteroptions selected" title"Category">Category</a>';
                $viewTtl = '<a href="/topics-titles/registrar/'.$registrarType.'" class="filteroptions" title"Alphabetical">A-Z</a>';
            } else { // advisement
                $viewCat = '<a href="/topics-categories/advisement/'.$advisementType.'" class="filteroptions selected" title"Category">Category</a>';
                $viewTtl = '<a href="/topics-titles/advisement/'.$advisementType.'" class="filteroptions" title"Alphabetical">A-Z</a>';
            }
            break;
        case "topics-titles":
            $viewCat = '<a href="/topics-categories/registrar/'.$registrarType.'" class="filteroptions" title"Category">Category</a>';
            $viewTtl = '<a href="/topics-titles/registrar/'.$registrarType.'" class="filteroptions selected" title"Alphabetical">A-Z</a>';
            break;
		case "news":
			isset($_GET["created"]) ? $created=$_GET["created"] : $created=0;
			switch ($created) {
				case 5:$extraInfoHuman = "Archive";break;
				case 4:$extraInfoHuman = "This Year";break;
				case 3:$extraInfoHuman = "This Month";break;
				case 2:$extraInfoHuman = "This Week";break;
				case 1:$extraInfoHuman = "Today";break;
				default: $extraInfoHuman = "";
			}
			break;
        case "user":
        case "profile":
            $netID = $extraInfoHuman;
            $pName = db_query("SELECT field_name_value FROM field_data_field_name n JOIN cas_user c ON c.uid = n.entity_id WHERE c.cas_name = :netid limit 1", array(":netid" => $netID))->fetchField();
            if (isset($pName)) {$extraInfoHuman = $pName;}
            break;
    }
    
    // BREADCRUMB "Back" Link
    $parentHREF = "";
    switch ($pageType) {
        case "news":
            if(isset($_GET["created"])) {
                $parentHREF = strtok($_SERVER["REQUEST_URI"],'?');
            }
            break;
        case "positions":
            if(isset($_GET["name"])) {
                $parentHREF = strtok($_SERVER["REQUEST_URI"],'?');
            }
            break;
        case "user":
                $parentHREF = "/directory";
            break;
		case "profile":
                $parentHREF = "/office/" . $officeType;
			break;
        case "office":
                $parentHREF = "/directory";
            break;
        case "position":
                $parentHREF = "/positions";
            break;
        case "topics":
            if(isset($_GET["quiz"])) {
                $quiz = $_GET["quiz"];
                $parentNODEID = db_query("SELECT entity_id FROM field_data_field_position_training WHERE (bundle = 'saas_position') AND (field_position_training_target_id = :quiz) limit 1", array(":quiz" => $quiz))->fetchField();
                $source = "node/" . $parentNODEID;
                $alias = drupal_lookup_path('alias', $source);
                $parentHREF = "/" . $alias;
            } else {
                $parentHREF = "/topics-category/" . str_replace("-","_",$officeType);
            }
            break;
        case "quiz":
            if(isset($_GET["quiz"])) {
                $quiz = $_GET["quiz"];
                $parentNODEID = db_query("SELECT entity_id FROM field_data_field_position_training WHERE (bundle = 'saas_position') AND (field_position_training_target_id = :quiz) limit 1", array(":quiz" => $quiz))->fetchField();
                $source = "node/" . $parentNODEID;
                $alias = drupal_lookup_path('alias', $source);
                $parentHREF = "/" . $alias;
            } 
            break;
    }
    
    $outPre = '<div class="clearfloats"></div><div id="curSection" class="' .  $thumbClass . '">';
	$outBody =  $pageTypeHuman;
    if ($officeTypeHuman != "" ) { 
        if ($parentHREF != "") {
            $outBody .= " . " . "<a style='color:white; text-decoration:none;' href='" .$parentHREF. "'>" . $officeTypeHuman . "</a>"; 
        } else {
            $outBody .= " . " . $officeTypeHuman; 
        }
    }
    if ($extraInfoHuman != "" ) { $outBody .= " . " . $extraInfoHuman; }
    if ($viewCat != "") { $outBody .= '<div id="topic-exposed-filter">' .$viewCat. '&nbsp;|&nbsp;' .$viewTtl. '</div>'; }
	$outSuf = '</div>';

    // Highlight Selected Menu
    // first hide the title    
    $module_path = drupal_get_path('module', 'saas_blocks');
    drupal_add_js('/' . $module_path . '/js/atitle.js', 'file');
    switch ($officeTypeHuman) {
        case "Admissions"               : $css = 'a[title="Admissions"]      { background-color: #fff; }'; break;
        case "Financial Aid"            : $css = 'a[title="Financial Aid"]   { background-color: #fff; }'; break;
        case "Registrar"                : $css = 'a[title="Registrar"]       { background-color: #fff; }'; break;
        // onestop
        case "OneStop Counseling"       : $css = 'a[title="OneStop"]         { background-color: #fff; }'; break;
        case "OneStop Processing"       : $css = 'a[title="OneStop"]         { background-color: #fff; }'; break;
        case "OneStop Student Services" : $css = 'a[title="OneStop"]         { background-color: #fff; }'; break;
        // other
        case "Executive Director"       : $css = 'a[title="Other"]           { background-color: #fff; }'; break;
        case "Financial Services"       : $css = 'a[title="Other"]           { background-color: #fff; }'; break;
        case "ICAT"                     : $css = 'a[title="Other"]           { background-color: #fff; }'; break;
        case "Technology Applications"  : $css = 'a[title="Other"]           { background-color: #fff; }'; break;
        case "Treasury Services"        : $css = 'a[title="Other"]           { background-color: #fff; }'; break;
    }
    if (isset($css)) {drupal_add_css($css, 'inline');}    

    // ========================================================= SHOW/HIDE MENU ==============================================================
    // SAAS Division = 8
    // Non-SAAS Division = 23
    global $user;
    $uGroup = db_query("SELECT master_id FROM rap_standard_assignment WHERE (master_type = 'group') AND (slave_type = 'user') AND (slave_id = :uid) limit 1", array(":uid" => $user->uid))->fetchField();
    $genealogy = $uGroup;
    while ($uGroup != 0) {
        $parent = db_query("SELECT parent_group FROM rap_group WHERE id = :gid limit 1", array(":gid" => $uGroup))->fetchField();
        $genealogy .= "," . $parent;
        $uGroup = $parent;
    }
    $gArray = explode(",",$genealogy);
    if (array_search(8, $gArray) === FALSE) { // not SAAS Division
       drupal_add_js("(function ($) { jQuery(document).ready(function($) {   $('a[title=\"Other\"]').parent().css( 'display', 'none' ); });  }(jQuery));", 'inline');
    } else {
       drupal_add_js("(function ($) { jQuery(document).ready(function($) {   $('a[title=\"Advisement Centers\"]').parent().css( 'display', 'none' ); });  }(jQuery));", 'inline');
    }
    // ========================================================= SHOW/HIDE MENU ==============================================================

	$output = array(
		'traincrumb output' => array(
			'#markup' => t($outBody),
			'#prefix' => t($outPre) ,
			'#suffix' => t($outSuf),
		),
	);

	return $output;
}



/**
 * Custom topic link function. 
 * 
 * @return 
 *   topic page output array
 */
function saas_blocks_node_permissions(){
    $grpSQL = "SELECT rpa.permission_type, rg.machine_name FROM rap_permission_assignment rpa ";
    $grpSQL .= "JOIN rap_group rg ";
    $grpSQL .= "ON rg.id = rpa.master_id ";
    $grpSQL .= "WHERE (rpa.master_type = 'group') ";
    $usrSQL = "SELECT rpa.permission_type, u.name FROM rap_permission_assignment rpa ";
    $usrSQL .= "JOIN users u ";
    $usrSQL .= "ON u.uid = rpa.master_id ";
    $usrSQL .= "WHERE (rpa.master_type = 'user') ";
    global $user;
    $roles = $user->roles;
    if ( ( array_search("administrator",$roles) === false ) && ( array_search("Content Manager",$roles) === false )) {
        $tooltips = 0;
    } else {
        $tooltips = 1;
    }
    // only show tooltips in EDIT mode
    if (!isset($_GET["edit"])) {
        $tooltips = 0;
    }
    $path = current_path();
    $pageArray = explode ("/",$path);
    $node = node_load($pageArray[1]);
    $links = '<div class="node-permission-block"><ul>';
    if(!empty($node->field_ac_content)){
        $content = $node->field_ac_content['und'];
        foreach($content as $temp){
            $tmpnode = node_load($temp['target_id']);
            $modified = date("d-M-Y",$tmpnode->changed);
            
            if(node_access('view', $tmpnode)){
                
                if (isset($temp['entity']->field_display_title['und'][0]['safe_value'])) { 
                    $nodeTitle = $temp['entity']->field_display_title['und'][0]['safe_value']; 
                    $links .= '<li class="node"><a href="#subtitle-' . $temp['target_id'] . '">' . $nodeTitle . '</a></li>';
                } else {
                    $nodeTitle = $temp['entity']->title;
                    if ($tooltips) {
                        $links .= '<li class="node-child">' . $nodeTitle . '</li>';
                    } 
                }
                
                if ($tooltips) {
                    $tmp = "<div class='tooltip'><b>". $nodeTitle . '</b><br>'; 
                    $tmpCnt = 0;
     
                    // GROUPS
                    $results = db_query($grpSQL . "AND (rpa.node_id = " . $temp['target_id'] . ") ORDER BY rg.machine_name,rpa.permission_type");
                    $crnt = ""; $pv = 0; $pu = 0; $pd = 0;
                    foreach($results as $line) {
                        if ($crnt != $line->machine_name) {
                            if(($pv+$pu+$pd) > 0) { $tmp .= ".&nbsp;" . $crnt . " - " . ($pv?"v":"") . ($pu?"u":"") .($pd?"d":"") . "</br>"; $tmpCnt++; }
                            $crnt = $line->machine_name; $pv = 0; $pu = 0; $pd = 0;
                        }
                        if($line->permission_type == "view") $pv = 1;
                        if($line->permission_type == "update") $pu = 1;
                        if($line->permission_type == "delete") $pd = 1;
                    }
                    if(($pv+$pu+$pd) > 0) { $tmp .= ".&nbsp;" . $crnt . " - " . ($pv?"v":"") . ($pu?"u":"") .($pd?"d":"") . "</br>"; $tmpCnt++; }
                    
                    // USERS
                    $results = db_query($usrSQL . "AND (rpa.node_id = " . $temp['target_id'] . ") ORDER BY u.name,rpa.permission_type");
                    $crnt = ""; $pv = 0; $pu = 0; $pd = 0;
                    foreach($results as $line) {
                        if ($crnt != $line->name) {
                            if(($pv+$pu+$pd) > 0) { $tmp .= ".&nbsp;<i>" . $crnt . " - " . ($pv?"v":"") . ($pu?"u":"") .($pd?"d":"") . "</i></br>"; $tmpCnt++; }
                            $crnt = $line->name; $pv = 0; $pu = 0; $pd = 0;
                        }
                        if($line->permission_type == "view") $pv = 1;
                        if($line->permission_type == "update") $pu = 1;
                        if($line->permission_type == "delete") $pd = 1;
                    }
                    if(($pv+$pu+$pd) > 0) { $tmp .= ".&nbsp;<i>" . $crnt . " - " . ($pv?"v":"") . ($pu?"u":"") .($pd?"d":"") . "</i></br>"; $tmpCnt++; }
                    $tmp .= "<div class='node-modified'>".$modified."</div>";
                    $tmp .= "</div>";
                    if ($tmpCnt > 0) {$links .= $tmp;} 
                } 
            }
        }
    }
    
	$links .= '</ul></div>';
	$output = array (
		'#type' => 'markup',
		'#prefix' => '',
		'#markup' => $links,
		'#suffix' => '',
		);

	return $output;
    
}

function saas_blocks_related_content() {
    $path = current_path();
    $pageArray = explode ("/",$path);
    $node = node_load($pageArray[1]);
    $links = '<div class="related-content-block"><h3>Related Content</h3><ul class="rc-list">';
    $linkCount = 0;
    
    $module_path = drupal_get_path('module', 'saas_blocks');
    $imgFile = '<img class="rc-icon" src="/' . $module_path . '/images/file.png" height="12" width="12">';
    $imgVideo = '<img class="rc-icon" src="/' . $module_path . '/images/video.png" height="12" width="12">';
    $imgTopic = '<img class="rc-icon" src="/' . $module_path . '/images/topic.png" height="12" width="12">';
    $imgImage = '<img class="rc-icon" src="/' . $module_path . '/images/image.png" height="12" width="12">';
    
    if(!empty($node->field_related_content)){
        $content = $node->field_related_content['und'];
        foreach($content as $temp){
            $tmpnode = node_load($temp['target_id']);
            
            if(node_access('view', $tmpnode)) {
                // Get Note Title
                if (isset($tmpnode->field_display_title['und'][0]['safe_value'])) { 
                    $nodeTitle = $tmpnode->field_display_title['und'][0]['safe_value']; 
                } else {
                    $nodeTitle = $tmpnode->title;
                }
                // shorten title
                $nodeFullTitle = $nodeTitle;
                if (strlen($nodeTitle) > 20) {
                    $nodeTitle = substr($nodeTitle,0,18) . "...";
                }
                
                // IMAGE
                if(isset($tmpnode->field_image)){
                    $nodeURI = $tmpnode->field_image['und'][0]['uri'];
                    $nodeURL = file_create_url($nodeURI);
                    $links .= "<li><a href='" .$nodeURL. "' rel='shadowbox' title='".$nodeFullTitle."'>" .$imgImage.$nodeTitle. "</a></li>";
                    $linkCount++;
                }
                // VIDEO
                if(isset($tmpnode->field_youtube_video)){
                    $nodeYTID = $tmpnode->field_youtube_video['und'][0]['video_id'];
                    $links .= "<li><a href='https://www.youtube.com/v/" .$nodeYTID. "' rel='shadowbox;width=800;height=600;' title='".$nodeFullTitle."'>" .$imgVideo.$nodeTitle. "</a></li>";
                    $linkCount++;
                }
                // FILE
                if(isset($tmpnode->field_file)){
                    $nodeURI = $tmpnode->field_file['und'][0]['uri'];
                    $nodeURL = file_create_url($nodeURI);
                    $links .= "<li><a href='" .$nodeURL. "' target='_blank' title='".$nodeFullTitle."'>" .$imgFile.$nodeTitle. "</a></li>";
                    $linkCount++;
                }
                // TOPIC PAGE
                if(isset($tmpnode->field_ac_content)){
                    $nodeID = $tmpnode->nid;
                    $nodeURL = "node/" . $nodeID;
                    $nodeAlias = drupal_lookup_path("alias", $nodeURL);
                    if ($nodeAlias === false) {
                        $links .= "<li><a href='/" .$nodeURL. "' title='".$nodeFullTitle."'>" .$imgTopic.$nodeTitle. "</a></li>";
                    } else {
                        $links .= "<li><a href='/" .$nodeAlias. "' title='".$nodeFullTitle."'>" .$imgTopic.$nodeTitle. "</a></li>";
                    }
                    $linkCount++;
                }
            }
        }
    }    
   
    $links .= '</ul></div>';
    if ($linkCount == 0) {
        $links = '<div class="related-content-block"></div>';
    }
	$output = array (
		'#type' => 'markup',
		'#prefix' => '',
		'#markup' => $links,
		'#suffix' => '',
		);
	return $output;
}

/**
 * Custom topic link function. 
 * 
 * @return 
 *   topic page output array
 */
function saas_blocks_topic_categories_links(){
    global $user;
    // Create an Array of Taxonomy Fields
    $results = db_query("SELECT field_name FROM field_config WHERE (type = 'taxonomy_term_reference') AND (field_name like '%_category') ");
    $taxFields = Array();
    foreach($results as $line) {
        $taxFields[] = $line->field_name;
    }

    // Get the current View
    $path = current_path();
    $pageArray = explode ("/",$path);

    if($pageArray[0] == "topics-categories") {
        $tmp = views_get_view('topics_category');
        $tmp->set_display("page_1");
        $tmp->set_arguments(array($pageArray[1],$pageArray[2]));
        $tmp->execute();
        $view = $tmp->result;
    } else {
        $tmp = views_get_view('topics_category');
        $tmp->set_display("page");
        $tmp->set_arguments(array($pageArray[1]));
        $tmp->execute();
        $view = $tmp->result;
    }

    $taxTerms = Array();
    foreach($view as $nodeInfo) {
        if (isset($nodeInfo->taxonomy_term_data_node_name)) {
            $taxTerms[] = $nodeInfo->taxonomy_term_data_node_name;
        }
    }
    // Get a Unique, Sorted list of Taxonomy Terms 
    $Taxonomy = array_unique($taxTerms);
    //sort($Taxonomy);
    
	$links = '<ul class="topics-navigation">';
    foreach($Taxonomy as $item) {
        $links .= '<li><a href="#' . $item . '">' . $item . '</a></li>';
    }
	$links .= '</ul>';
    
    $output = array (
        '#type' => 'markup',
        '#prefix' => '',
        '#markup' => $links,
        '#suffix' => '',
        );

    return $output;
}



/**
 * Quick Links for Training Test 
 * 
 * @return 
 *   List of Nodes to Review + Quiz to take
 */
function saas_blocks_training_index(){

    drupal_add_js("(function ($) { jQuery(document).ready(function($) { $('#content').hide().fadeIn(300); });    }(jQuery));", 'inline');
    drupal_add_js("(function ($) { jQuery(document).ready(function($) { $('.saasblock-training-index a').click(function(){ $('#content').fadeOut(200); });  });   }(jQuery));", 'inline');
    drupal_add_js("function loadPage(url) { location.href=url; }", 'inline');
    
    $path = current_path();
    $markup = '';
    $markup .= '<div CLASS="saasblock-training-index">';

    if (isset($_GET['quiz'])) {
        $quiz = $_GET['quiz'];
        $source = "node/" . $quiz;
        $alias = drupal_lookup_path('alias', $source);
        $node = $quiz;
        $nodeInfo = node_load($node);
        $markup .= "<h2>".$nodeInfo->title."</h2>";
        
        // TOPICS
        $markup .= "<h3>Topics</h3>";
        $sql = "SELECT n.title, n.nid FROM node n ";
        $sql .= "JOIN field_data_field_training_topics ftt ";
        $sql .= "ON n.nid = ftt.field_training_topics_target_id ";
        $sql .= "WHERE ftt.entity_id = ".$node." ";
        $sql .= "ORDER BY ftt.delta";
        $topics = db_query($sql);
        foreach($topics as $line) {
            $thisTitle = $line->title;
            $thisNID = $line->nid;
            $thisSource = "node/" . $thisNID;
            if ($thisSource == $path) {
                $addClass = " CLASS='saasblock-training-current'";
            } else {
                $addClass = "";
            }
            $thisAlias = drupal_lookup_path('alias', $thisSource);
            $newURL = "/" .$thisAlias. "?quiz=" .$quiz;
            if (strlen($thisTitle) > 25) {$thisTitle = substr($thisTitle,0,25) . "...";}
            $markup .= "<A HREF='javascript:void(0);' onClick='loadPage(\"" .$newURL. "\");'" .$addClass. ">" .$thisTitle. "</a><br>";
        }
        
        $markup .= '<h3>Quiz</h3>';
        
        // ASSESSMENTS
        $sql = "SELECT n.title, n.nid FROM node n ";
        $sql .= "JOIN field_data_field_training_assessment fta ";
        $sql .= "ON n.nid = fta.field_training_assessment_target_id ";
        $sql .= "WHERE fta.entity_id = ".$node." ";
        $sql .= "ORDER BY fta.delta";
        $assessments = db_query($sql);
        foreach($assessments as $line) {
            $thisTitle = $line->title;
            $thisNID = $line->nid;
            $thisSource = "node/" . $thisNID;
            if ($thisSource == $path) {
                $addClass = " CLASS='saasblock-training-current'";
            } else {
                $addClass = "";
            }
            $thisAlias = drupal_lookup_path('alias', $thisSource);
            $newURL = "/" .$thisAlias. "?quiz=" .$quiz;
            if (strlen($thisTitle) > 25) {$thisTitle = substr($thisTitle,0,25) . "...";}
            $markup .= "<A HREF='javascript:void(0);' onClick='loadPage(\"" .$newURL. "\");'" .$addClass. ">" .substr($thisTitle,0,20). "</a><br>";
        }
        
       
    }
    $markup .= '</div>';
    $output = array (
        '#type' => 'markup',
        '#markup' => $markup,
    );

    return $output;
}


/**
 * Custom footer links function. 
 * 
 * @return 
 *   footer links HTML
 */
function saas_blocks_icat_power(){
  $markup = '';
  $module_path = drupal_get_path('module', 'saas_blocks');
  $markup .= '<div class="icat_power_block"><div class="link-list">';
  $markup .= '<a href="http://b4byu.com/" target="_blank"><img src="/' . $module_path . '/images/ADM.png"></a>';
  $markup .= '<a href="http://financialaid.byu.edu" target="_blank"><img src="/' . $module_path . '/images/FA.png"></a>';
  $markup .= '<a href="http://onestop.byu.edu" target="_blank"><img src="/' . $module_path . '/images/OS.png"></a>';
  $markup .= '<a href="http://registrar.byu.edu" target="_blank"><img src="/' . $module_path . '/images/REG.png"></a>';
  $markup .= '<a href="http://icat.byu.edu" target="_blank"><img src="/' . $module_path . '/images/ICAT.png"></a>';
  $markup .= '<div class="icat_power">Powered by ICAT</div>';
  $markup .= '</div></div>';
  
  $output = array (
  '#type' => 'markup',
  '#markup' => $markup,
  );
  
  return $output;
}

/**
 * Custom Profile Info function. 
 * 
 * @return 
 *   Profile Info array
 */
function saas_blocks_profile_info(){
    $path = current_path();
    $pageArray = explode ("/",$path);
    $markup = '<div CLASS="saasblock-groups-roles">';

    if (array_search("user", $pageArray) !== false) {
        if (isset($pageArray[1])) {
            $uid = $pageArray[1];
            $user = user_load($uid);
            $user_groups = standard_assignment_DAO::user_read_groups($uid);
            
            // GROUPS
            $markup .= 'Groups<ul>';
            foreach($user_groups as $grp) {
                if (isset($grp->master_id)) {
                    $group = group_DAO::group_read($grp->master_id);
                    if (isset($group['human_name'])) {
                        $markup .= '<li>' . $group['human_name'] . '</li>'; 
                    }
                }
            }
            $markup .= '</ul>';
            
            // ROLES
            if (isset($user->roles)) {
                $markup .= 'Roles<ul>';
                foreach($user->roles as $role) {
                   $markup .= '<li>' . $role . '</li>'; 
                }
                $markup .= '</ul>';
            }
            
        }
    }
    $markup .= '</div>';
      
    $output = array (
    '#type' => 'markup',
    '#markup' => $markup,
    );
      
    return $output;
}


/* *********************************************************************************************************************************************** **

                                                            USER IMPORT BLOCK

** *********************************************************************************************************************************************** */

/**
 * Import users from uploaded CSV and IMAGES 
 * 
 * @return 
 *   Profile Info array
 */
function saas_blocks_user_import(){
    $markup = "";
    
    $uploadDIR = "/var/www/html/upload/server/php/files";
    $thumbsDIR = $uploadDIR . "/thumbnail";

    // GET VALID OPTIONS
    // ------ GROUPS 
    $grpLIST = db_query("SELECT id, human_name FROM rap_group ORDER BY human_name");
    $grpArray = array();
    foreach($grpLIST as $grp) { $grpArray[$grp->id] = $grp->human_name; }
    // ------ OFFICES 
    $offLIST = db_query("SELECT tid, name FROM taxonomy_term_data WHERE vid in (SELECT vid FROM taxonomy_vocabulary WHERE machine_name = 'user_offices') ORDER BY name");
    $offArray = array();
    foreach($offLIST as $off) { $offArray[$off->tid] = $off->name; }
    // ------ POSITIONS 
    $posLIST = db_query("SELECT nid,title FROM node WHERE type = 'saas_position' ORDER BY title");
    $posArray = array();
    foreach($posLIST as $pos) { $posArray[$pos->nid] = $pos->title; }
    // ------ STATUS
    $staArray = array();
    $staArray[0] = "Blocked";
    $staArray[1] = "Active";
    // ------ EMPLOYMENT
    $empArray = array();
    $empArray["student"] = "Student";
    $empArray["staff"] = "Staff";

    
    // CSV FILE
    $csv = $uploadDIR . '/import.csv';
    $master = $uploadDIR . '/master-' .date("Y.m.d-H.i.s"). '.csv';

    // READ IN CSV DATA
    $headers = Array();
    $data = Array();
    $row = 0;
    if (file_exists($csv)) {
        if (($handle = fopen($csv, "r")) !== FALSE) {
            $headers = fgetcsv($handle, 5000, ',', '"');
            while (($data[$row] = fgetcsv($handle, 5000, ',', '"')) !== FALSE) {
                $row++;
            }
            fclose($handle);
            // remove CSV once done.
            unlink($csv);
        }
    } else {
        $markup .= "<BR>IMPORTANT: Flush the cache after each import<BR>";
        $markup .= "<BR><b>import.csv</b> Not Found<BR>";
        $markup .= "<BR>CSV FIELDS: netid,name,status,employment,group,office,position,location,phone,about,dob<BR>";
        $markup .= "<table><tr><th colspan=2 style='background-color:#444;'>STATUS VALUES</th></tr>"; 
            foreach($staArray as $key => $value) {$markup .= "<tr><td>$value</td><td width=20%>$key</td></tr>";} $markup .= "</table>";
        $markup .= "<table><tr><th colspan=2 style='background-color:#444;'>EMPLOYMENT VALUES</th></tr>"; 
            foreach($empArray as $key => $value) {$markup .= "<tr><td>$value</td><td width=20%>$key</td></tr>";} $markup .= "</table>";
        $markup .= "<table><tr><th colspan=2 style='background-color:#444;'>GROUP VALUES</th></tr>"; 
            foreach($grpArray as $key => $value) {$markup .= "<tr><td>$value</td><td width=20%>$key</td></tr>";} $markup .= "</table>";
        $markup .= "<table><tr><th colspan=2 style='background-color:#444;'>OFFICE VALUES</th></tr>";
            foreach($offArray as $key => $value) {$markup .= "<tr><td>$value</td><td width=20%>$key</td></tr>";} $markup .= "</table>";
        $markup .= "<table><tr><th colspan=2 style='background-color:#444;'>POSITION VALUES</th></tr>";
            foreach($posArray as $key => $value) {$markup .= "<tr><td>$value</td><td width=20%>$key</td></tr>";} $markup .= "</table>";
    }

    // LOOP THROUGH CSV RECORDS
    foreach($data as $user) {
        $num = count($user);
        // THERE SHOULD BY 11 ITEMS
        if ($num == 11) {
            $netID      = preg_replace('/[^a-z0-9]/','',strtolower(trim($user[0])));
            $name       = preg_replace('/[^a-zA-Z ]/','',trim($user[1]));
            $status     = intval(trim($user[2]));
            $employment = strtolower(trim($user[3]));
            $group      = intval(trim($user[4]));
            $office     = intval(trim($user[5]));
            $position   = intval(trim($user[6]));
            $location   = substr(preg_replace('/[^a-zA-Z0-9 -]/','',trim($user[7])), 0, 100);
            $phone      = substr(preg_replace('/[^0-9-]/','',trim($user[8])), 0, 6);
            $about      = substr(preg_replace('/[^a-zA-Z0-9 <>!,.-]/',' ',trim($user[9])), 0, 2200); $about = preg_replace('/\s+/', ' ',$about);
            $dob        = date_parse(trim($user[10]));
            if ($dob === false) {
                $birthday = "1970-01-01";
            } else {
                $birthday = date('Y-m-d', mktime(0,0,0,$dob['month'],$dob['day'],$dob['year']));
            }
            $timezone = "America/Denver";
            
            $markup .= "Working on $netID...<br>";
            // validation
            $errors = 0;
            if (empty($netID))                  {$errors++; $markup .= "&nbsp;&nbsp;ERROR: empty netid<br>";}
            if (empty($name))                   {$errors++; $markup .= "&nbsp;&nbsp;ERROR: empty name<br>";}
            if (!isset($staArray[$status]))     {$errors++; $markup .= "&nbsp;&nbsp;ERROR: -$status- is not a valid status<br>";}
            if (!isset($empArray[$employment])) {$errors++; $markup .= "&nbsp;&nbsp;ERROR: -$employment- is not a valid employment<br>";}
            if (!isset($grpArray[$group]))      {$errors++; $markup .= "&nbsp;&nbsp;ERROR: -$group- is not a valid group<br>";}
            if (!isset($offArray[$office]))     {$errors++; $markup .= "&nbsp;&nbsp;ERROR: -$office- is not a valid office<br>";}
            if (!isset($posArray[$position]))   {$errors++; $markup .= "&nbsp;&nbsp;ERROR: -$position- is not a valid position<br>";}
            //$markup .= $netID.",".$name.",".$status.",".$group.",".$office.",".$position.",".$location.",".$phone.",".$about.",".$birthday."<br>";
            
            if ($errors == 0) {
                /* ---------------------------------------- CREATE USER ---------------------------------------- */        
                        // FIND UID - if this returns FALSE, create the user. 
                        $uid = db_query("SELECT uid FROM users WHERE name = :name limit 1", array(":name" => $netID))->fetchField();
                        if ($uid === false) {
                            $chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
                            $ranPass = '';
                            for ($i = 0; $i < 10; $i++) { $ranPass .= $chars[rand(0, strlen($chars) - 1)]; }
                       
                            $newUser = array(
                              'name' => $netID,
                              'pass' => $ranPass,   // use random password - users actually use CAS auth
                              'mail' => $netID. '@byu.edu',  // this will also be over written when 
                              'status' => $status,          // status 1=>ACTIVE, 0=>BLOCKED 
                              'timezone' => $timezone,
                              'init' => $netID
                            );
                            
                            $newData = user_save(null, $newUser);
                            $uid = $newData->uid;
                            $markup .= "&nbsp;&nbsp;CREATED $netID...<br>";
                            
                /* ---------------------------------------- UPDATE STATUS ---------------------------------------- */        
                        } else {
                            $result = db_query("UPDATE users SET status = :status, timezone = :timezone WHERE uid = :uid", array(":status" => $status,":timezone" => $timezone,":uid" => $uid,));
                            $markup .= "&nbsp;&nbsp;UPDATED $netID...<br>";
                        }

                /* ---------------------------------------- field array ---------------------------------------- */        
                        // ARRAY of standard field_data_table_values
                        $field_data = array();
                        $field_data['entity_type'] = 'user';
                        $field_data['bundle'] = 'user';
                        $field_data['deleted'] = 0;
                        $field_data['entity_id'] = $uid;
                        $field_data['revision_id'] = $uid;
                        $field_data['language'] = 'und';
                        $field_data['delta'] = 0;

                /* ---------------------------------------- CAS USER ---------------------------------------- */        
                        // CAS user
                        $cas_name = db_query("SELECT cas_name FROM cas_user WHERE uid = :uid limit 1", array(":uid" => $uid))->fetchField();
                        if ($cas_name === false) {
                            $field = array();
                            $field["uid"] = $uid;
                            $field["cas_name"] = $netID;
                            $result = db_insert('cas_user')->fields($field)->execute(); 
                            $markup .= "&nbsp;&nbsp;ADDED CAS $netID...<br>";
                        }

                /* ---------------------------------------- CAS ATTRIBUTES ------------------------------------ */        
                        $full_name = $name;
                        $preferred_name = $name;
                        $preferred_first_name = reset(explode(" ",trim($name)));
                        $preferred_last_name = end(explode(" ",trim($name)));

                        // ADD Full Name
                        $test = db_query("SELECT field_user_full_name_value FROM field_data_field_user_full_name WHERE entity_id = :entity_id limit 1", array(":entity_id" => $uid))->fetchField();
                        if ($test === false) {
                            $field = array();
                            $field = $field_data;
                            $field['field_user_full_name_value'] = $full_name;
                            $result = db_insert('field_data_field_user_full_name')->fields($field)->execute();
                            $result = db_insert('field_revision_field_user_full_name')->fields($field)->execute();
                        }
                        
                        // ADD Preferred Name
                        $test = db_query("SELECT field_user_preferred_name_value FROM field_data_field_user_preferred_name WHERE entity_id = :entity_id limit 1", array(":entity_id" => $uid))->fetchField();
                        if ($test === false) {
                            $field = array();
                            $field = $field_data;
                            $field['field_user_preferred_name_value'] = $preferred_name;
                            $result = db_insert('field_data_field_user_preferred_name')->fields($field)->execute();
                            $result = db_insert('field_revision_field_user_preferred_name')->fields($field)->execute();
                        }
                        
                        // ADD Preferred First Name
                        $test = db_query("SELECT field_user_preferred_first_value FROM field_data_field_user_preferred_first WHERE entity_id = :entity_id limit 1", array(":entity_id" => $uid))->fetchField();
                        if ($test === false) {
                            $field = array();
                            $field = $field_data;
                            $field['field_user_preferred_first_value'] = $preferred_first_name;
                            $result = db_insert('field_data_field_user_preferred_first')->fields($field)->execute();
                            $result = db_insert('field_revision_field_user_preferred_first')->fields($field)->execute();
                        }
                        
                        // ADD Preferred Last Name
                        $test = db_query("SELECT field_user_preferred_last_value FROM field_data_field_user_preferred_last WHERE entity_id = :entity_id limit 1", array(":entity_id" => $uid))->fetchField();
                        if ($test === false) {
                            $field = array();
                            $field = $field_data;
                            $field['field_user_preferred_last_value'] = $preferred_last_name;
                            $result = db_insert('field_data_field_user_preferred_last')->fields($field)->execute();
                            $result = db_insert('field_revision_field_user_preferred_last')->fields($field)->execute();
                        }
                        

                        
                /* ---------------------------------------- NAME ---------------------------------------- */        
                        // field_data_field_name field_revision_field_name
                        $result = db_query("DELETE FROM field_data_field_name WHERE entity_id = :entity_id", array(":entity_id" => $uid));
                        $result = db_query("DELETE FROM field_revision_field_name WHERE entity_id = :entity_id", array(":entity_id" => $uid));
                        $field = array();
                        $field = $field_data;
                        $field['field_name_value'] = $name;
                        $result = db_insert('field_data_field_name')->fields($field)->execute();
                        $result = db_insert('field_revision_field_name')->fields($field)->execute();
                        $markup .= "&nbsp;&nbsp;ADDED NAME $netID - $netID.<br>";
                 
                /* ---------------------------------------- EMPLOYMENT ---------------------------------------- */        
                        // field_data_field_user_emp_type field_revision_field_user_emp_type
                        $result = db_query("DELETE FROM field_data_field_user_emp_type WHERE entity_id = :entity_id", array(":entity_id" => $uid));
                        $result = db_query("DELETE FROM field_revision_field_user_emp_type WHERE entity_id = :entity_id", array(":entity_id" => $uid));
                        $field = array();
                        $field = $field_data;
                        $field['field_user_emp_type_value'] = $employment;
                        $result = db_insert('field_data_field_user_emp_type')->fields($field)->execute();
                        $result = db_insert('field_revision_field_user_emp_type')->fields($field)->execute();
                        $markup .= "&nbsp;&nbsp;ADDED EMPLOYMENT $netID - $employment.<br>";

                /* ---------------------------------------- OFFICE ---------------------------------------- */        
                        // field_data_field_user_office field_revision_field_user_office
                        $result = db_query("DELETE FROM field_data_field_user_office WHERE entity_id = :entity_id", array(":entity_id" => $uid));
                        $result = db_query("DELETE FROM field_revision_field_user_office WHERE entity_id = :entity_id", array(":entity_id" => $uid));
                        $field = array();
                        $field = $field_data;
                        $field['field_user_office_tid'] = $office;
                        $result = db_insert('field_data_field_user_office')->fields($field)->execute();
                        $result = db_insert('field_revision_field_user_office')->fields($field)->execute();
                        $markup .= "&nbsp;&nbsp;ADDED OFFICE $netID - $office.<br>";

                /* ---------------------------------------- POSITION ---------------------------------------- */        
                        // field_data_field_position field_revision_field_position
                        $result = db_query("DELETE FROM field_data_field_position WHERE entity_id = :entity_id", array(":entity_id" => $uid));
                        $result = db_query("DELETE FROM field_revision_field_position WHERE entity_id = :entity_id", array(":entity_id" => $uid));
                        $field = array();
                        $field = $field_data;
                        $field['field_position_target_id'] = $position;
                        $result = db_insert('field_data_field_position')->fields($field)->execute();
                        $result = db_insert('field_revision_field_position')->fields($field)->execute();
                        $markup .= "&nbsp;&nbsp;ADDED POSITION $netID - $position.<br>";

                /* ---------------------------------------- LOCATION ---------------------------------------- */    
                        // field_data_field_office_location field_revision_field_office_location
                        $result = db_query("DELETE FROM field_data_field_office_location WHERE entity_id = :entity_id", array(":entity_id" => $uid));
                        $result = db_query("DELETE FROM field_revision_field_office_location WHERE entity_id = :entity_id", array(":entity_id" => $uid));
                        $field = array();
                        $field = $field_data;
                        $field['field_office_location_value'] = $location;
                        $result = db_insert('field_data_field_office_location')->fields($field)->execute();
                        $result = db_insert('field_revision_field_office_location')->fields($field)->execute();
                        $markup .= "&nbsp;&nbsp;ADDED LOCATION $netID - $location.<br>";

                /* ---------------------------------------- PHONE ---------------------------------------- */  
                        // field_data_field_office_phone field_revision_field_office_phone
                        $result = db_query("DELETE FROM field_data_field_office_phone WHERE entity_id = :entity_id", array(":entity_id" => $uid));
                        $result = db_query("DELETE FROM field_revision_field_office_phone WHERE entity_id = :entity_id", array(":entity_id" => $uid));
                        $field = array();
                        $field = $field_data;
                        $field['field_office_phone_value'] = $phone;
                        $result = db_insert('field_data_field_office_phone')->fields($field)->execute();
                        $result = db_insert('field_revision_field_office_phone')->fields($field)->execute();
                        $markup .= "&nbsp;&nbsp;ADDED PHONE $netID - $phone.<br>";

                /* ---------------------------------------- ABOUT ---------------------------------------- */ 
                        // field_data_field_user_about field_revision_field_user_about
                        $result = db_query("DELETE FROM field_data_field_user_about WHERE entity_id = :entity_id", array(":entity_id" => $uid));
                        $result = db_query("DELETE FROM field_revision_field_user_about WHERE entity_id = :entity_id", array(":entity_id" => $uid));
                        $field = array();
                        $field = $field_data;
                        $field['field_user_about_value'] = $about;
                        $result = db_insert('field_data_field_user_about')->fields($field)->execute();
                        $result = db_insert('field_revision_field_user_about')->fields($field)->execute();
                        $markup .= "&nbsp;&nbsp;ADDED ABOUT $netID - $about.<br>";

                /* ---------------------------------------- BIRTHDAY ---------------------------------------- */
                        // field_data_field_user_birthday field_revision_field_user_birthday
                        $result = db_query("DELETE FROM field_data_field_user_birthday WHERE entity_id = :entity_id", array(":entity_id" => $uid));
                        $result = db_query("DELETE FROM field_revision_field_user_birthday WHERE entity_id = :entity_id", array(":entity_id" => $uid));
                        $field = array();
                        $field = $field_data;
                        $field['field_user_birthday_value'] = $birthday;
                        $result = db_insert('field_data_field_user_birthday')->fields($field)->execute();
                        $result = db_insert('field_revision_field_user_birthday')->fields($field)->execute();
                        $markup .= "&nbsp;&nbsp;ADDED BIRTHDAY $netID - $birthday.<br>";

                /* ---------------------------------------- PHOTO ---------------------------------------- */
                        $picFilename = $uploadDIR . "/" . $netID . ".jpg";
                        $thumbFilename = $thumbsDIR . "/" . $netID . ".jpg";
                        if (file_exists($picFilename)) {
                            $img = file_get_contents($picFilename);
                            $newFilename = "picture-" . $uid . "-" . time() . ".jpg";
                            $newPath = "private://pictures/" . $newFilename;
                            $file = file_save_data($img, $newPath);
                            if ($file !== false) {
                                $result = db_query("DELETE FROM file_usage WHERE (module='user') AND (type='user') AND id = :id", array(":id" => $uid));
                                $fid = $file->fid;
                                $field = array();
                                $field['fid']       = $fid; 
                                $field['module']    = 'user';
                                $field['type']      = 'user';
                                $field['id']        = $uid;
                                $field['count']     = 1;
                                $result = db_insert('file_usage')->fields($field)->execute();
                                $result = db_query("UPDATE users SET picture = :fid WHERE uid = :uid", array(":fid" => $fid,":uid" => $uid,));
                                $markup .= "&nbsp;&nbsp;ADDED PHOTO $netID - $newFilename.<br>";
                                // remove pictures once they are done
                                unlink($picFilename);
                                unlink($thumbFilename);
                            }
                        }        
                        
                /* ---------------------------------------- GROUP ---------------------------------------- */
                        // rap_standard_assignment
                        $back10 = time()-10;
                        $result = db_query("DELETE FROM rap_standard_assignment WHERE (master_type='group') AND (slave_type='user') AND (slave_id=:sid) AND (revision_date < :b10)", array(":sid" => $uid, ":b10" => $back10));
                        $field = array();
                        $field['master_type']   = 'group';
                        $field['master_id']     = $group;
                        $field['slave_type']    = 'user';
                        $field['slave_id']      = $uid;
                        $field['revision_date'] = time();
                        $result = db_insert('rap_standard_assignment')->fields($field)->execute();
                        $markup .= "&nbsp;&nbsp;ADDED GROUP $netID - $group.<br>";
            }
        }
    }

    // CREATE MASTER.CSV (only CAS users)
    $allUSERS = db_query("SELECT uid, name, status FROM users WHERE uid in (SELECT uid FROM cas_user) ORDER BY status, name");
    file_put_contents($master,"netid,name,status,employment,group,office,position,location,phone,about,dob\n",FILE_APPEND);
    foreach($allUSERS as $user) {
 
        $uid        = $user->uid;
        $netID      = $user->name;
        $status     = $user->status;
        $employment = db_query("SELECT field_user_emp_type_value        FROM field_data_field_user_emp_type     WHERE entity_id = :entity_id limit 1", array(":entity_id" => $uid))->fetchField();
        $name       = db_query("SELECT field_name_value                 FROM field_data_field_name              WHERE entity_id = :entity_id limit 1", array(":entity_id" => $uid))->fetchField();
        $office     = db_query("SELECT field_user_office_tid            FROM field_data_field_user_office       WHERE entity_id = :entity_id limit 1", array(":entity_id" => $uid))->fetchField();
        $position   = db_query("SELECT field_position_target_id         FROM field_data_field_position          WHERE entity_id = :entity_id limit 1", array(":entity_id" => $uid))->fetchField();
        $location   = db_query("SELECT field_office_location_value      FROM field_data_field_office_location   WHERE entity_id = :entity_id limit 1", array(":entity_id" => $uid))->fetchField();
        $phone      = db_query("SELECT field_office_phone_value         FROM field_data_field_office_phone      WHERE entity_id = :entity_id limit 1", array(":entity_id" => $uid))->fetchField();
        $about      = db_query("SELECT field_user_about_value           FROM field_data_field_user_about        WHERE entity_id = :entity_id limit 1", array(":entity_id" => $uid))->fetchField();
        $dob        = db_query("SELECT field_user_birthday_value        FROM field_data_field_user_birthday     WHERE entity_id = :entity_id limit 1", array(":entity_id" => $uid))->fetchField();

        $myGroups   = db_query("SELECT master_id, slave_id,revision_date FROM rap_standard_assignment WHERE (master_type='group') AND (slave_type='user') AND (slave_id=:sid)", array(":sid" => $uid));
        foreach($myGroups as $group) {
            $str = "";
            $str .= '"' .  str_replace('"','',trim($netID)) . '",';
            $str .= '"' .  str_replace('"','',trim($name)) . '",';
            $str .= $status . ",";
            $str .= $employment . ",";
            $str .= $group->master_id . ",";
            $str .= $office . ",";
            $str .= $position . ",";
            $str .= '"' . str_replace('"','',trim($location)) . '",';
            $str .= '" ' . str_replace('"','',trim($phone)) . '",';
            $str .= '"' . str_replace('"','',trim($about)) . '",';
            $str .= date("Y/m/d",strtotime($dob)) . "\n";
            file_put_contents($master,$str,FILE_APPEND);
        }
    }

    $output = array (
        '#type' => 'markup',
        '#markup' => $markup,
    );
    return $output;   

}
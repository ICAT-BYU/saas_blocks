<?php
/**
 * @file
 * Block Module to display a breadcrumb as a page title.
 */


 
 /**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function saas_blocks_help($path, $arg) {
  switch ($path) {
    case "admin/help#traincrumbs":
      return '<p>' . t("Displays breadcrumb as a page title with regard to the current URL") . '</p>';
      break;
  }
} 



/**
 * Implements hook_block_info().
 */
function saas_blocks_block_info() {
    $blocks['traincrumbs'] = array(
        // The name that will appear in the block list.
        'info' => t('Traincrumbs'),
        // Default setting.
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    $blocks['topic_category_nav'] = array(
        //The name that will appear in the block list.
        'info' => t('Topic Category Page Navigation'),
        // Will change for each topic category page
        'cache' => DRUPAL_CACHE_PER_PAGE,
    );
    $blocks['node_permissions'] = array(
        //The name that will appear in the block list.
        'info' => t('Topic Page Navigation with Node Permissions'),
        // Will change for each topic category page
        'cache' => DRUPAL_CACHE_PER_PAGE,
    );
    $blocks['icat_power'] = array(
        //The name that will appear in the block list.
        'info' => t('Powered By ICAT'),
        // Will change for each topic category page
        'cache' => DRUPAL_CACHE_GLOBAL,
    );
    $blocks['user_profile_info'] = array(
        //The name that will appear in the block list.
        'info' => t('Users Profile Information'),
        // Will change for each topic category page
        'cache' => DRUPAL_CACHE_GLOBAL,
    );
    $blocks['training_module_index'] = array(
        //The name that will appear in the block list.
        'info' => t('Training Module Index'),
        // Will change for each topic category page
        'cache' => DRUPAL_CACHE_GLOBAL,
    );

    return $blocks;
}



/**
 * Custom content function. 
 * 
 * @return 
 *   training breadcrumb output array
 */
function saas_blocks_contents(){
	// parse URL elements
	$urlArray = parse_url($_SERVER['REQUEST_URI']);

	// current page path
	$pageArray = explode("/",trim($urlArray['path'],"/"));

	// get the current page and current type from the url
	if (isset($pageArray[0])) { $curType = $pageArray[0]; } else { $curType = ""; }
	if (isset($pageArray[1])) { $curPage = $pageArray[1]; } else { $curPage = ""; }

	// Array of machine => human readable page names
	$curPageArray = array(
		"admissions" => "Admissions",
		"financial_aid" => "Financial Aid",
		"financial-aid" => "Financial Aid",
		"student_services" => "Student Services",
		"student-services" => "Student Services",
		"counseling" => "Counseling",
		"processing" => "Processing",
		"registrar" => "Registrar",
		"other" => "Other",
		"icat" => "ICAT",
		"ICAT" => "ICAT",
		"executive_director" => "Executive Director",
		"executive-director" => "Executive Director",
		"technology_applications" => "Technology Applications",
		"technology-applications" => "Technology Applications",
		"financial_services" => "Financial Services",
		"financial-services" => "Financial Services",
		"treasury_services" => "Treasury Services",
		"treasury-services" => "Treasury Services",
	);

	// Array of page types
	$curTypeArray = array(
		"news" => "News",
		"positions" => "Positions",
		"tools" => "Tools",
		"topics_category" => "topics_category",
		"topics_title" => "topics_title",

	);


	// set human readable variables from machine readable content contained in the url
	$curPageMachine = $curPage;
	$curPageHuman = "";
	if (isset($curPageArray[$curPage])) { $curPageHuman = $curPageArray[$curPage]; }
			$curPageClass = $curPageMachine;
			$curPageOffice = $curPageHuman;

			$mainCat = $curPageHuman;
			$subCat = "";
			$viewCat = "";
			$viewTtl = "";

			$curTypeMachine = $curType;
			$curTypeHuman = "";
			
  if (isset($curTypeArray[$curType])) { $curTypeHuman = $curTypeArray[$curType]; }
	switch($curType) {
		case "news":
			isset($_GET["created"]) ? $created=$_GET["created"] : $created=0;
			switch ($created) {
				case 5:$subCat = "Archive";break;
				case 4:$subCat = "This Year";break;
				case 3:$subCat = "This Month";break;
				case 2:$subCat = "This Week";break;
				case 1:$subCat = "Today";break;
				default: $subCat = "";
			}
			break;
		case "positions": $subCat = $curTypeHuman; break;

		case "tools": break;

    case "topics-category": 
			$viewCat = '<a href="/topics-category/'.$curPage.'" class="filteroptions selected" title"Category">Category</a>';
			$viewTtl = '<a href="/topics-title/'.$curPage.'" class="filteroptions" title"Alphabetical">A-Z</a>';
			break;

		case "topics-title": 
			$viewCat = '<a href="/topics-category/'.$curPage.'" class="filteroptions" title"Category">Category</a>';
			$viewTtl = '<a href="/topics-title/'.$curPage.'" class="filteroptions selected" title"Alphabetical">A-Z</a>';
			break;
		case "topics":
			$pageTitle = drupal_get_title();;
			break;

	}


	$outPre = '<div class="clearfloats"></div><div id="curSection" class="' .  $curPageClass . '">';
	$outBody =  $curPageOffice;
	if(isset($pageTitle)){ $outBody .= " . " . $pageTitle; }
	if ($subCat != "") { $outBody .= "&nbsp;.&nbsp;" . $subCat; }
	if ($viewCat != "") { $outBody .= '<div id="topic-exposed-filter">' .$viewCat. '&nbsp;|&nbsp;' .$viewTtl. '</div>'; }
	$outSuf = '</div>';
  

	$output = array(
		'traincrumb output' => array(
			'#markup' => t($outBody),
			'#prefix' => t($outPre) ,
			'#suffix' => t($outSuf),
		),
	);

	return $output;
}


/**
 * Custom topic link function. 
 * 
 * @return 
 *   topic page output array
 */
function saas_blocks_node_permissions(){
    $grpSQL = "SELECT rpa.permission_type, rg.machine_name FROM rap_permission_assignment rpa ";
    $grpSQL .= "JOIN rap_group rg ";
    $grpSQL .= "ON rg.id = rpa.master_id ";
    $grpSQL .= "WHERE (rpa.master_type = 'group') ";
    $usrSQL = "SELECT rpa.permission_type, u.name FROM rap_permission_assignment rpa ";
    $usrSQL .= "JOIN users u ";
    $usrSQL .= "ON u.uid = rpa.master_id ";
    $usrSQL .= "WHERE (rpa.master_type = 'user') ";
    global $user;
    $roles = $user->roles;
    if ( ( array_search("administrator",$roles) === false ) && ( array_search("Content Manager",$roles) === false )) {
        $tooltips = 0;
    } else {
        $tooltips = 1;
    }
    $path = current_path();
    $pageArray = explode ("/",$path);
    $node = node_load($pageArray[1]);
    $links = '<div class="node-permission-block"><ul>';
    if(!empty($node->field_ac_content)){
        $content = $node->field_ac_content['und'];
        foreach($content as $temp){
            $tmpnode = node_load($temp['target_id']);
            if(node_access('view', $tmpnode)){
                
                if (isset($temp['entity']->field_display_title['und'][0]['safe_value'])) { 
                    $nodeTitle = $temp['entity']->field_display_title['und'][0]['safe_value']; 
                    $links .= '<li class="node"><a href="#subtitle-' . $temp['target_id'] . '">' . $nodeTitle . '</a></li>';
                } else {
                    $nodeTitle = $temp['entity']->title;
                    if ($tooltips) {
                        $links .= '<li class="node-child">' . $nodeTitle . '</li>';
                    } 
                }
                
                if ($tooltips) {
                    $tmp = "<div class='tooltip'><b>". $nodeTitle . '</b><br>'; 
                    $tmpCnt = 0;
     
                    // GROUPS
                    $results = db_query($grpSQL . "AND (rpa.node_id = " . $temp['target_id'] . ") ORDER BY rg.machine_name,rpa.permission_type");
                    $crnt = ""; $pv = 0; $pu = 0; $pd = 0;
                    foreach($results as $line) {
                        if ($crnt != $line->machine_name) {
                            if(($pv+$pu+$pd) > 0) { $tmp .= ".&nbsp;" . $crnt . " - " . ($pv?"v":"") . ($pu?"u":"") .($pd?"d":"") . "</br>"; $tmpCnt++; }
                            $crnt = $line->machine_name; $pv = 0; $pu = 0; $pd = 0;
                        }
                        if($line->permission_type == "view") $pv = 1;
                        if($line->permission_type == "update") $pu = 1;
                        if($line->permission_type == "delete") $pd = 1;
                    }
                    if(($pv+$pu+$pd) > 0) { $tmp .= ".&nbsp;" . $crnt . " - " . ($pv?"v":"") . ($pu?"u":"") .($pd?"d":"") . "</br>"; $tmpCnt++; }
                    
                    // USERS
                    $results = db_query($usrSQL . "AND (rpa.node_id = " . $temp['target_id'] . ") ORDER BY u.name,rpa.permission_type");
                    $crnt = ""; $pv = 0; $pu = 0; $pd = 0;
                    foreach($results as $line) {
                        if ($crnt != $line->name) {
                            if(($pv+$pu+$pd) > 0) { $tmp .= ".&nbsp;<i>" . $crnt . " - " . ($pv?"v":"") . ($pu?"u":"") .($pd?"d":"") . "</i></br>"; $tmpCnt++; }
                            $crnt = $line->name; $pv = 0; $pu = 0; $pd = 0;
                        }
                        if($line->permission_type == "view") $pv = 1;
                        if($line->permission_type == "update") $pu = 1;
                        if($line->permission_type == "delete") $pd = 1;
                    }
                    if(($pv+$pu+$pd) > 0) { $tmp .= ".&nbsp;<i>" . $crnt . " - " . ($pv?"v":"") . ($pu?"u":"") .($pd?"d":"") . "</i></br>"; $tmpCnt++; }

                    $tmp .= "</div>";
                    if ($tmpCnt > 0) {$links .= $tmp;} 
                }
             }
        }
    }
	$links .= '</ul></div>';
	$output = array (
		'#type' => 'markup',
		'#prefix' => '',
		'#markup' => $links,
		'#suffix' => '',
		);

	return $output;
    
}

/**
 * Custom topic link function. 
 * 
 * @return 
 *   topic page output array
 */
function saas_blocks_topic_categories_links(){
    global $user;
    // Create an Array of Taxonomy Fields
    $results = db_query("SELECT field_name FROM field_config WHERE (type = 'taxonomy_term_reference') AND (field_name like '%_category') ");
    $taxFields = Array();
    foreach($results as $line) {
        $taxFields[] = $line->field_name;
    }

    // Get the current View
    $path = current_path();
    $pageArray = explode ("/",$path);
    $view = views_get_view_result("topics_category","default",$pageArray[1]);
    $taxTerms = Array();
    foreach($view as $nodeInfo) {
        $node = node_load($nodeInfo->nid);
        if (node_access('view',$node,$user)) {
            foreach($taxFields as $tf) {
                if (isset($node->$tf)) {
                    $tmp = $node->$tf;
                    if (isset($tmp["und"][0]["tid"])) {
                        $term = taxonomy_term_load($tmp["und"][0]["tid"]);
                        $taxTerms[] = $term->name;
                    }
                }
            }
        }
    }
    // Get a Unique, Sorted list of Taxonomy Terms 
    $Taxonomy = array_unique($taxTerms);
    sort($Taxonomy);
    
	$links = '<ul class="topics-navigation">';
    foreach($Taxonomy as $item) {
        $links .= '<li><a href="#' . $item . '">' . $item . '</a></li>';
    }
	$links .= '</ul>';
    
    $output = array (
        '#type' => 'markup',
        '#prefix' => '',
        '#markup' => $links,
        '#suffix' => '',
        );

    return $output;
}



/**
 * Quick Links for Training Test 
 * 
 * @return 
 *   List of Nodes to Review + Quiz to take
 */
function saas_blocks_training_index(){
    // if FROM TEST PAGE - reload page with quiz in the URL
    $referer = $_SERVER['HTTP_REFERER'];
    $refererArray = explode ("/",$referer);
    $isContent = array_search("content", $refererArray);
    if ($isContent !== false) {
        if (isset($refererArray[$isContent+1])) {
        $url = $_SERVER['REQUEST_URI'];
        $newUrl = parse_url($url, PHP_URL_PATH) . "?quiz=" . $refererArray[$isContent+1];
        drupal_add_js("window.location.replace('". $newUrl ."');", 'inline');
        }
    }

    drupal_add_js("(function ($) { jQuery(document).ready(function($) { $('#content').hide().fadeIn(300); });    }(jQuery));", 'inline');
    drupal_add_js("(function ($) { jQuery(document).ready(function($) { $('.saasblock-training-index a').click(function(){ $('#content').fadeOut(200); });  });   }(jQuery));", 'inline');
    drupal_add_js("function loadPage(url) { location.href=url; }", 'inline');
    
    
    $path = current_path();
    $markup = '';
    $markup .= '<div CLASS="saasblock-training-index">';

    if (isset($_GET['quiz'])) {
        $quiz = $_GET['quiz'];
        $human = ucwords(strtolower(str_replace("-"," ",$quiz))); 
        $markup .= "<h2>".$human."</h2>";
        $alias = "content/" . $quiz;
        $source = drupal_lookup_path('source', $alias);
        $node = trim($source,"node/");

        // TOPICS
        $markup .= "<h3>Topics</h3>";
        $sql = "SELECT n.title, n.nid FROM node n ";
        $sql .= "JOIN field_data_field_training_topics ftt ";
        $sql .= "ON n.nid = ftt.field_training_topics_target_id ";
        $sql .= "WHERE ftt.entity_id = ".$node." ";
        $sql .= "ORDER BY ftt.delta";
        $topics = db_query($sql);
        foreach($topics as $line) {
            $thisTitle = $line->title;
            $thisNID = $line->nid;
            $thisSource = "node/" . $thisNID;
            if ($thisSource == $path) {
                $addClass = " CLASS='saasblock-training-current'";
            } else {
                $addClass = "";
            }
            $thisAlias = drupal_lookup_path('alias', $thisSource);
            $newURL = "/" .$thisAlias. "?quiz=" .$quiz;
            if (strlen($thisTitle) > 25) {$thisTitle = substr($thisTitle,0,25) . "...";}
            $markup .= "<A HREF='javascript:void(0);' onClick='loadPage(\"" .$newURL. "\");'" .$addClass. ">" .$thisTitle. "</a><br>";
        }
        
        $markup .= '<h3>Quiz</h3>';
        
        // ASSESSMENTS
        $sql = "SELECT n.title, n.nid FROM node n ";
        $sql .= "JOIN field_data_field_training_assessment fta ";
        $sql .= "ON n.nid = fta.field_training_assessment_target_id ";
        $sql .= "WHERE fta.entity_id = ".$node." ";
        $sql .= "ORDER BY fta.delta";
        $assessments = db_query($sql);
        foreach($assessments as $line) {
            $thisTitle = $line->title;
            $thisNID = $line->nid;
            $thisSource = "node/" . $thisNID;
            if ($thisSource == $path) {
                $addClass = " CLASS='saasblock-training-current'";
            } else {
                $addClass = "";
            }
            $thisAlias = drupal_lookup_path('alias', $thisSource);
            $newURL = "/" .$thisAlias. "?quiz=" .$quiz;
            if (strlen($thisTitle) > 25) {$thisTitle = substr($thisTitle,0,25) . "...";}
            $markup .= "<A HREF='javascript:void(0);' onClick='loadPage(\"" .$newURL. "\");'" .$addClass. ">" .substr($thisTitle,0,20). "</a><br>";
        }
        
       
    }
    $markup .= '</div>';
    $output = array (
        '#type' => 'markup',
        '#markup' => $markup,
    );

    return $output;
}


/**
 * Custom footer links function. 
 * 
 * @return 
 *   footer links HTML
 */
function saas_blocks_icat_power(){
  $markup = '';
  $module_path = drupal_get_path('module', 'saas_blocks');
  $markup .= '<div class="icat_power_block"><div class="link-list">';
  $markup .= '<a href="http://b4byu.com/" target="_blank"><img src="/' . $module_path . '/images/ADM.png"></a>';
  $markup .= '<a href="http://financialaid.byu.edu" target="_blank"><img src="/' . $module_path . '/images/FA.png"></a>';
  $markup .= '<a href="http://icat.byu.edu" target="_blank"><img src="/' . $module_path . '/images/ICAT.png"></a>';
  $markup .= '<a href="http://onestop.byu.edu" target="_blank"><img src="/' . $module_path . '/images/OS.png"></a>';
  $markup .= '<a href="http://registrar.byu.edu" target="_blank"><img src="/' . $module_path . '/images/REG.png"></a>';
  $markup .= '<div class="icat_power">Powered by ICAT</div>';
  $markup .= '</div></div>';
  
  $output = array (
  '#type' => 'markup',
  '#markup' => $markup,
  );
  
  return $output;
}

/**
 * Custom Profile Info function. 
 * 
 * @return 
 *   Profile Info array
 */
function saas_blocks_profile_info(){
    $path = current_path();
    $pageArray = explode ("/",$path);
    $markup = '<div CLASS="saasblock-groups-roles">';

    if (array_search("user", $pageArray) !== false) {
        if (isset($pageArray[1])) {
            $uid = $pageArray[1];
            $user = user_load($uid);
            $user_groups = standard_assignment_DAO::user_read_groups($uid);
            
            // GROUPS
            $markup .= 'Groups<ul>';
            foreach($user_groups as $grp) {
                if (isset($grp->master_id)) {
                    $group = group_DAO::group_read($grp->master_id);
                    if (isset($group['human_name'])) {
                        $markup .= '<li>' . $group['human_name'] . '</li>'; 
                    }
                }
            }
            $markup .= '</ul>';
            
            // ROLES
            if (isset($user->roles)) {
                $markup .= 'Roles<ul>';
                foreach($user->roles as $role) {
                   $markup .= '<li>' . $role . '</li>'; 
                }
                $markup .= '</ul>';
            }
            
        }
    }
    $markup .= '</div>';
      
    $output = array (
    '#type' => 'markup',
    '#markup' => $markup,
    );
      
    return $output;
}



/**
 * Implements hook_block_view().
 * 
 * Prepares the contents of the block.
 */
function saas_blocks_block_view($block_name = '') {

	drupal_add_css(drupal_get_path('module', 'traincrumbs') . '/css/traincrumbs.css');
	switch ($block_name) {
		case 'traincrumbs':
			$block['subject'] = t('Traincrumbs');
			$traincrumbs = saas_blocks_contents();
			$block['content'] = $traincrumbs;  
			return $block;
        case 'topic_category_nav':
			$block['subject'] = t('Topic Category Page Navigation');
			$topic_categories_links = saas_blocks_topic_categories_links();
			$block['content'] = $topic_categories_links;
			return $block;
		case 'node_permissions':
			$block['subject'] = t('Topic Page Navigation with Node Permissions');
			$node_permissions = saas_blocks_node_permissions();
			$block['content'] = $node_permissions;
			return $block;
        case 'icat_power':
			$block['subject'] = t('Powered by ICAT');
			$icat_power = saas_blocks_icat_power();
			$block['content'] = $icat_power;
			return $block;
        case 'user_profile_info':
			$block['subject'] = t('Users Profile Information');
			$profile_info = saas_blocks_profile_info();
			$block['content'] = $profile_info;
			return $block;
        case 'training_module_index':
			$block['subject'] = t('Training Module Index');
			$training_index = saas_blocks_training_index();
			$block['content'] = $training_index;
			return $block;
  }

  
}



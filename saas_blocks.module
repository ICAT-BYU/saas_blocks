<?php
/**
 * @file
 * Block Module to display a breadcrumb as a page title.
 */


 
 /**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function saas_blocks_help($path, $arg) {
  switch ($path) {
    case "admin/help#traincrumbs":
      return '<p>' . t("Displays breadcrumb as a page title with regard to the current URL") . '</p>';
      break;
  }
} 



/**
 * Implements hook_block_info().
 */
function saas_blocks_block_info() {
    $blocks['traincrumbs'] = array(
        // The name that will appear in the block list.
        'info' => t('Traincrumbs'),
        // Default setting.
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    $blocks['topic_nav'] = array(
        //The name that will appear in the block list.
        'info' => t('Topic Page Navigation'),
        // Will change for each topic page
        'cache' => DRUPAL_CACHE_PER_PAGE,
    );
    $blocks['topic_category_nav'] = array(
        //The name that will appear in the block list.
        'info' => t('Topic Category Page Navigation'),
        // Will change for each topic category page
        'cache' => DRUPAL_CACHE_PER_PAGE,
    );
    $blocks['node_permissions'] = array(
        //The name that will appear in the block list.
        'info' => t('Node Permissions 4CMs'),
        // Will change for each topic category page
        'cache' => DRUPAL_CACHE_PER_PAGE,
    );

    return $blocks;
}



/**
 * Custom content function. 
 * 
 * @return 
 *   training breadcrumb output array
 */
function saas_blocks_contents(){
	// parse URL elements
	$urlArray = parse_url($_SERVER['REQUEST_URI']);

	// current page path
	$pageArray = explode("/",trim($urlArray['path'],"/"));

	// get the current page and current type from the url
	if (isset($pageArray[0])) { $curType = $pageArray[0]; } else { $curType = ""; }
	if (isset($pageArray[1])) { $curPage = $pageArray[1]; } else { $curPage = ""; }

	// Array of machine => human readable page names
	$curPageArray = array(
		"admissions" => "Admissions",
		"financial_aid" => "Financial Aid",
		"financial-aid" => "Financial Aid",
		"student_services" => "Student Services",
		"student-services" => "Student Services",
		"counseling" => "Counseling",
		"processing" => "Processing",
		"registrar" => "Registrar",
		"other" => "Other",
		"icat" => "ICAT",
		"ICAT" => "ICAT",
		"executive_director" => "Executive Director",
		"executive-director" => "Executive Director",
		"technology_applications" => "Technology Applications",
		"technology-applications" => "Technology Applications",
		"financial_services" => "Financial Services",
		"financial-services" => "Financial Services",
		"treasury_services" => "Treasury Services",
		"treasury-services" => "Treasury Services",
	);

	// Array of page types
	$curTypeArray = array(
		"news" => "News",
		"positions" => "Positions",
		"tools" => "Tools",
		"topics_category" => "topics_category",
		"topics_title" => "topics_title",

	);


	// set human readable variables from machine readable content contained in the url
	$curPageMachine = $curPage;
	$curPageHuman = "";
	if (isset($curPageArray[$curPage])) { $curPageHuman = $curPageArray[$curPage]; }
			$curPageClass = $curPageMachine;
			$curPageOffice = $curPageHuman;

			$mainCat = $curPageHuman;
			$subCat = "";
			$viewCat = "";
			$viewTtl = "";

			$curTypeMachine = $curType;
			$curTypeHuman = "";
			
  if (isset($curTypeArray[$curType])) { $curTypeHuman = $curTypeArray[$curType]; }
	switch($curType) {
		case "news":
			isset($_GET["created"]) ? $created=$_GET["created"] : $created=0;
			switch ($created) {
				case 5:$subCat = "Archive";break;
				case 4:$subCat = "This Year";break;
				case 3:$subCat = "This Month";break;
				case 2:$subCat = "This Week";break;
				case 1:$subCat = "Today";break;
				default: $subCat = "";
			}
			break;
		case "positions": $subCat = $curTypeHuman; break;

		case "tools": break;

    case "topics-category": 
			$viewCat = '<a href="/topics-category/'.$curPage.'" class="filteroptions selected" title"Category">Category</a>';
			$viewTtl = '<a href="/topics-title/'.$curPage.'" class="filteroptions" title"Alphabetical">A-Z</a>';
			break;

		case "topics-title": 
			$viewCat = '<a href="/topics-category/'.$curPage.'" class="filteroptions" title"Category">Category</a>';
			$viewTtl = '<a href="/topics-title/'.$curPage.'" class="filteroptions selected" title"Alphabetical">A-Z</a>';
			break;
		case "topics":
			$pageTitle = drupal_get_title();;
			break;

	}


	$outPre = '<div class="clearfloats"></div><div id="curSection" class="' .  $curPageClass . '">';
	$outBody =  $curPageOffice;
	if(isset($pageTitle)){ $outBody .= " . " . $pageTitle; }
	if ($subCat != "") { $outBody .= "&nbsp;.&nbsp;" . $subCat; }
	if ($viewCat != "") { $outBody .= '<div id="topic-exposed-filter">' .$viewCat. '&nbsp;|&nbsp;' .$viewTtl. '</div>'; }
	$outSuf = '</div>';
  

	$output = array(
		'traincrumb output' => array(
			'#markup' => t($outBody),
			'#prefix' => t($outPre) ,
			'#suffix' => t($outSuf),
		),
	);

	return $output;
}


/**
 * Custom topic link function. 
 * 
 * @return 
 *   topic page output array
 */
function saas_blocks_topics_links(){
  $path = current_path();
  $pageArray = explode ("/",$path);
  $node = node_load($pageArray[1]);
	$links = '<ul class="topics-navigation">';

		if(!empty($node->field_ac_content)){
			$content = $node->field_ac_content['und'];
				
			foreach($content as $temp){
				$tmpnode = node_load($temp['target_id']);
				if(node_access('view', $tmpnode)){
					if(isset($temp['entity']->field_display_title['und'][0]['safe_value'])){
					$links .= '<li><a href="#subtitle-' . $temp['target_id'] . '">' . $temp['entity']->field_display_title['und'][0]['safe_value'] . '</a></li>';
					}
				}
			}
		}

	$links .= '</ul>';
	$output = array (
		'#type' => 'markup',
		'#prefix' => '',
		'#markup' => $links,
		'#suffix' => '',
		);

	return $output;
}

/**
 * Custom topic link function. 
 * 
 * @return 
 *   topic page output array
 */
function saas_blocks_node_permissions(){
    $grpSQL = "SELECT rpa.permission_type, rg.machine_name FROM rap_permission_assignment rpa ";
    $grpSQL .= "JOIN rap_group rg ";
    $grpSQL .= "ON rg.id = rpa.master_id ";
    $grpSQL .= "WHERE (rpa.master_type = 'group') ";
    $usrSQL = "SELECT rpa.permission_type, u.name FROM rap_permission_assignment rpa ";
    $usrSQL .= "JOIN users u ";
    $usrSQL .= "ON u.uid = rpa.master_id ";
    $usrSQL .= "WHERE (rpa.master_type = 'user') ";

    $path = current_path();
    $pageArray = explode ("/",$path);
    $node = node_load($pageArray[1]);
    $links = '<div class="node-permission-block"><h3>Permissions</h3><ul>';
    if(!empty($node->field_ac_content)){
        $content = $node->field_ac_content['und'];
        foreach($content as $temp){
            $tmpnode = node_load($temp['target_id']);
            if(node_access('view', $tmpnode)){
                $links .= '<li class="node">'. $temp['entity']->field_display_title['und'][0]['safe_value'] . '</li>';
                // GROUPS
                $results = db_query($grpSQL . "AND (rpa.node_id = " . $temp['target_id'] . ") ORDER BY rg.machine_name,rpa.permission_type");
                $tmp = ""; $tmpCnt = 0;
                $tmp .= '<ul class="perms"><li class="ug">Groups</li>';
                $crnt = ""; $pv = 0; $pu = 0; $pd = 0;
                foreach($results as $line) {
                    if ($crnt != $line->machine_name) {
                        if(($pv+$pu+$pd) > 0) { $tmp .= ".&nbsp;" . $crnt . " - " . ($pv?"v":"") . ($pu?"u":"") .($pd?"d":"") . "</br>"; $tmpCnt++; }
                        $crnt = $line->machine_name; $pv = 0; $pu = 0; $pd = 0;
                    }
                    if($line->permission_type == "view") $pv = 1;
                    if($line->permission_type == "update") $pu = 1;
                    if($line->permission_type == "delete") $pd = 1;
                }
                if(($pv+$pu+$pd) > 0) { $tmp .= ".&nbsp;" . $crnt . " - " . ($pv?"v":"") . ($pu?"u":"") .($pd?"d":"") . "</br>"; $tmpCnt++; }
                $tmp .= '</ul>';
                if ($tmpCnt > 0) {$links .= $tmp;} 
                
                // USERS
                $results = db_query($usrSQL . "AND (rpa.node_id = " . $temp['target_id'] . ") ORDER BY u.name,rpa.permission_type");
                $tmp = ""; $tmpCnt = 0;
                $tmp .=  '<ul class="perms"><li class="ug">Users</li>';
                $crnt = ""; $pv = 0; $pu = 0; $pd = 0;
                foreach($results as $line) {
                    if ($crnt != $line->name) {
                        if(($pv+$pu+$pd) > 0) { $tmp .= ".&nbsp;" . $crnt . " - " . ($pv?"v":"") . ($pu?"u":"") .($pd?"d":"") . "</br>"; $tmpCnt++; }
                        $crnt = $line->name; $pv = 0; $pu = 0; $pd = 0;
                    }
                    if($line->permission_type == "view") $pv = 1;
                    if($line->permission_type == "update") $pu = 1;
                    if($line->permission_type == "delete") $pd = 1;
                }
                if(($pv+$pu+$pd) > 0) { $tmp .= ".&nbsp;" . $crnt . " - " . ($pv?"v":"") . ($pu?"u":"") .($pd?"d":"") . "</br>"; $tmpCnt++; }
                $tmp .= '</ul>';
                if ($tmpCnt > 0) {$links .= $tmp;} 
             }
        }
    }
	$links .= '</ul></div>';
	$output = array (
		'#type' => 'markup',
		'#prefix' => '',
		'#markup' => $links,
		'#suffix' => '',
		);

	return $output;
    
// $temp['target_id']
}

/**
 * Custom topic link function. 
 * 
 * @return 
 *   topic page output array
 */
function saas_blocks_topic_categories_links(){
    global $user;
    // Create an Array of Taxonomy Fields
    $results = db_query("SELECT field_name FROM field_config WHERE (type = 'taxonomy_term_reference') AND (field_name like '%_category') ");
    $taxFields = Array();
    foreach($results as $line) {
        $taxFields[] = $line->field_name;
    }

    // Get the current View
    $path = current_path();
    $pageArray = explode ("/",$path);
    $view = views_get_view_result("topics_category","default",$pageArray[1]);
    $taxTerms = Array();
    foreach($view as $nodeInfo) {
        $node = node_load($nodeInfo->nid);
        if (node_access('view',$node,$user)) {
            foreach($taxFields as $tf) {
                if (isset($node->$tf)) {
                    $tmp = $node->$tf;
                    if (isset($tmp["und"][0]["tid"])) {
                        $term = taxonomy_term_load($tmp["und"][0]["tid"]);
                        $taxTerms[] = $term->name;
                    }
                }
            }
        }
    }
    // Get a Unique, Sorted list of Taxonomy Terms 
    $Taxonomy = array_unique($taxTerms);
    sort($Taxonomy);
    
	$links = '<ul class="topics-navigation">';
    foreach($Taxonomy as $item) {
        $links .= '<li><a href="#' . $item . '">' . $item . '</a></li>';
    }
	$links .= '</ul>';
    
    $output = array (
        '#type' => 'markup',
        '#prefix' => '',
        '#markup' => $links,
        '#suffix' => '',
        );

    return $output;
}


/**
 * Implements hook_block_view().
 * 
 * Prepares the contents of the block.
 */
function saas_blocks_block_view($block_name = '') {

	drupal_add_css(drupal_get_path('module', 'traincrumbs') . '/css/traincrumbs.css');
	switch ($block_name) {
		case 'traincrumbs':
			$block['subject'] = t('Traincrumbs');
			$traincrumbs = saas_blocks_contents();
			$block['content'] = $traincrumbs;  
			return $block;
		case 'topic_nav':
			$block['subject'] = t('Topic Page Navigation');
			$topic_links = saas_blocks_topics_links();
			$block['content'] = $topic_links;
			return $block;
		case 'topic_category_nav':
			$block['subject'] = t('Topic Category Page Navigation');
			$topic_categories_links = saas_blocks_topic_categories_links();
			$block['content'] = $topic_categories_links;
			return $block;
		case 'node_permissions':
			$block['subject'] = t('Node Permissions 4CMs');
			$node_permissions = saas_blocks_node_permissions();
			$block['content'] = $node_permissions;
			return $block;
  }

  
}

 